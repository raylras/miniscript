import type { Module } from 'langium'
import type { DefaultSharedModuleContext, LangiumServices, LangiumSharedServices, PartialLangiumServices } from 'langium/lsp'
import { inject } from 'langium'
import { createDefaultModule, createDefaultSharedModule } from 'langium/lsp'
import { MiniScriptGeneratedModule, MiniScriptGeneratedSharedModule } from './generated/module.js'
import { MiniScriptInlayHintProvider } from './lsp/inlay-hint-provider.js'
import { MiniScriptTypeComputer } from './types/type-computer.js'

/**
 * Declaration of custom services - add your own service classes here.
 */
export interface MiniScriptAddedServices {
  typing: {
    TypeComputer: MiniScriptTypeComputer
  }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type MiniScriptServices = LangiumServices & MiniScriptAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const MiniScriptModule: Module<MiniScriptServices, PartialLangiumServices & MiniScriptAddedServices> = {
  lsp: {
    InlayHintProvider: () => new MiniScriptInlayHintProvider(),
  },
  typing: {
    TypeComputer: services => new MiniScriptTypeComputer(services),
  },
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createMiniScriptServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices
  miniscript: MiniScriptServices
} {
  const shared = inject(
    createDefaultSharedModule(context),
    MiniScriptGeneratedSharedModule,
  )

  const miniscript = inject(
    createDefaultModule({ shared }),
    MiniScriptGeneratedModule,
    MiniScriptModule,
  )
  shared.ServiceRegistry.register(miniscript)
  if (!context.connection) {
    // We don't run inside a language server
    // Therefore, initialize the configuration provider instantly
    shared.workspace.ConfigurationProvider.initialized({})
  }
  return { shared, miniscript }
}
